// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array mem;
    static int size,next,freeList;
    /** Initializes the class. */
    function void init() {
        let size = 0;
        let next = 1;
        let mem =0;
        let freeList = 2048; // Base address of heap
        let mem[freeList+size] = 14333;
        let mem[freeList+next] = null;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return mem[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let mem[address]=value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int wSize) {
        var int prev,curr;
        let curr =freeList;
        let prev = 0;
        // first-fit
        while (curr > 0)
        {
            if (mem[curr+size]>size)
            {
                let mem[curr+wSize+1]=mem[curr] - wSize -1;
                let mem[curr+next+wSize+1] = mem[curr+next];
                let mem[curr] = wSize + 1 ;
                if (prev = 0)
                {
                    let freeList = curr +wSize+next;
                }
                else
                {
                    let mem[prev+next]=curr+wSize+1;
                }
                return curr+1;
            }else
            {
                let prev = curr;
                let curr = mem[curr+next];
            }
        }
        return null;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let o[0]=freeList;
        let freeList =o;
        return;
    }    
}
