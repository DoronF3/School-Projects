// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array array; // The address of the string.
    field int length; // The current length of the string.

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
		if (maxLength<1)
		{
			let maxLength =1;
		}
        let array = Array.new(maxLength);
        let length = 0;
		return this;
    }

    /** Disposes this string. */
    method void dispose() {
        let length = 0;
        do array.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return array[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let array[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let array[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val, i, d;
        var boolean neg;

        let val = 0;
        if(array[0] = 45) { // -
            let neg = true;
            let i = 1;
        }
        else {
            let neg = false;
			let i = 0;
        }
        while((i<length) & (~(array[i] < 48)) & (~(array[i] > 57))) {
            let d = array[i] - 48;
            let val = (val * 10) + d;
            let i = i + 1;
        }
        if (neg) {
        return -val;
        }
        return val;
    }

    /** A method that acts as mod operator. */
    method int mod(int val) {
        var int num, digit;
        if (val < 10) {
            return val;
        }
        let num = (val / 10) * 10;
        let digit = val - num;
        return digit;
    }

    /** A method that translates a positive value to its sting representation, */
    method void int2Str(int val) {
        var int lastDigit;
        var int c; // was char instead of int, didnt compiled this way
        let lastDigit = mod(val);
        let c =lastDigit + 48;
        if (val < 10) {
            do appendChar(c);
        }
        else {
            do int2Str(val/10);
            do appendChar(c);
        }
        return;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        // Clear the current string.
        let length = 0;

        if (val < 0) {
            do appendChar(45);
            let val = - val;
        }
        do int2Str(val);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
